/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package viewer;

import com.Messages;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import javax.swing.table.DefaultTableModel;
import org.jfree.data.time.Day;

/**
 *
 * @author Lasitha Ranawaka
 */
public class IndividualTraineesAttendancePracticalClass extends javax.swing.JDialog {

    /**
     * Creates new form template
     */
    public IndividualTraineesAttendancePracticalClass(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date date = new Date();
        String currentyear = dateFormat.format(date);
        txt_date.setText(currentyear);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txt_admission_no = new javax.swing.JTextField();
        txt_date = new javax.swing.JFormattedTextField();
        txt_barcode = new javax.swing.JTextField();
        txt_name = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_practical = new javax.swing.JTable();

        jLabel6.setText("jLabel6");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setBackground(new java.awt.Color(255, 51, 51));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 51));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Trainees Attendance Practical Class");
        jLabel1.setOpaque(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setText("Barcode");

        jLabel5.setText("Date");

        jButton1.setText("Submit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Name");

        txt_admission_no.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_admission_noKeyReleased(evt);
            }
        });

        try {
            txt_date.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####-##-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        txt_barcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_barcodeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_barcodeKeyReleased(evt);
            }
        });

        jLabel3.setText("Admission No");

        tbl_practical.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", "Topic 1", null, null, null, "V1", "Mr.Nimal"},
                {"", "Topic 2", null, null, null, "V1", "Mr.Vijitha"},
                {"", "Topic 3", null, null, null, "V2", "Mr.Nimal"},
                {"", "Topic 4", null, null, null, "v3", "Mr.Nimal"},
                {"", "Topic 5", null, null, null, "v2", "Mr.Nimal"},
                {"", null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Date", "Topic", "Starting Time", "Ending Time", "Duration", "Vehicle", "Name of the Lecture"
            }
        ));
        jScrollPane1.setViewportView(tbl_practical);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(txt_barcode, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(txt_admission_no, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(txt_name, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(txt_date, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txt_barcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txt_admission_no, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txt_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txt_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        if (txt_barcode.getText().isEmpty() || txt_admission_no.getText().isEmpty() || txt_name.getText().isEmpty() || txt_date.getText().isEmpty()) {
            com.Messages.errorjoption("Please fill the data fields");
            txt_barcode.grabFocus();
        } else {

           

                try {
                    model.db.putData("INSERT INTO attendance_practical(barcode,admission,status,customer_register_id)values"
                            + "('" + txt_barcode.getText() + "','" + txt_admission_no.getText() + "','" + 1 + "','" + cus_id + "')");

                    int maxid = 0;
                    ResultSet rs = model.db.getData("SELECT\n"
                            + "MAX(attendance_practical.id)\n"
                            + "FROM\n"
                            + "attendance_practical");

                    if (rs.next()) {
                        maxid = rs.getInt(1);

                    }
                    for (int i = 0; i < tbl_practical.getRowCount(); i++) {
                        String date = tbl_practical.getValueAt(i, 0).toString();
                        String topic = tbl_practical.getValueAt(i, 1).toString();
                        String starting_time = tbl_practical.getValueAt(i, 2).toString();
                        String ending_time = tbl_practical.getValueAt(i, 3).toString();
                        String duration = tbl_practical.getValueAt(i, 4).toString();
                        String vehicle = tbl_practical.getValueAt(i, 5).toString();
                        String instructor = tbl_practical.getValueAt(i, 6).toString();

                        model.db.putData("INSERT INTO practical_topics(date,name,starting_time,ending_time,duration_of_time,vehicle,instructor,status,attendance_practical_id)values"
                                + "('" + date + "','" + topic + "','" + starting_time + "','" + ending_time + "','" + duration + "','" + vehicle + "','"+instructor+"','"+1+"','"+maxid+"')");

                    }

                    com.Messages.normaljoption("Data saved");
                } catch (Exception e) {
                    e.printStackTrace();
                }

            

        }
    }//GEN-LAST:event_jButton1ActionPerformed
    int cus_id = 0;
    private void txt_admission_noKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_admission_noKeyReleased
        try {
            ResultSet rs = model.db.getData("SELECT\n"
                    + "customer_register.id,\n"
                    + "customer_register.barcode,\n"
                    + "uniquecustomerdetails.namewithinitial\n"
                    + "FROM\n"
                    + "customer_register ,\n"
                    + "uniquecustomerdetails\n"
                    + "WHERE\n"
                    + "customer_register.admission_no = '" + txt_admission_no.getText() + "' AND\n"
                    + "customer_register.uniqueCustomerDetails_id = uniquecustomerdetails.id");

            if (rs.next()) {
                cus_id = rs.getInt(1);
                System.out.println("customer id" + cus_id);
                txt_barcode.setText(rs.getString(2));
                txt_name.setText(rs.getString(3));
//                addtotable();

            }
        } catch (Exception e) {
            e.printStackTrace();
        }


    }//GEN-LAST:event_txt_admission_noKeyReleased

    private void txt_barcodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_barcodeKeyReleased
//        try {
//            ResultSet rs = model.db.getData("SELECT\n"
//                    + "customer_register.admission_no,\n"
//                    + "customer_register.id,\n"
//                    + "uniquecustomerdetails.namewithinitial\n"
//                    + "FROM\n"
//                    + "customer_register ,\n"
//                    + "uniquecustomerdetails\n"
//                    + "WHERE\n"
//                    + "customer_register.barcode = '" + txt_barcode.getText() + "' AND\n"
//                    + "customer_register.uniqueCustomerDetails_id = uniquecustomerdetails.id");
//
//            if (rs.next()) {
//                cus_id = rs.getInt(2);
//                System.out.println("customer id" + cus_id);
//                txt_admission_no.setText(rs.getString(1));
//                txt_name.setText(rs.getString(3));
//                addtotable();
//
//            }
//
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//        
//        gettime();
    }//GEN-LAST:event_txt_barcodeKeyReleased

    private void txt_barcodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_barcodeKeyPressed
        if (evt.getKeyCode() == 10) {
            try {
                ResultSet rs = model.db.getData("SELECT\n"
                        + "customer_register.admission_no,\n"
                        + "customer_register.id,\n"
                        + "uniquecustomerdetails.namewithinitial\n"
                        + "FROM\n"
                        + "customer_register ,\n"
                        + "uniquecustomerdetails\n"
                        + "WHERE\n"
                        + "customer_register.barcode = '" + txt_barcode.getText() + "' AND\n"
                        + "customer_register.uniqueCustomerDetails_id = uniquecustomerdetails.id");

                if (rs.next()) {
                    cus_id = rs.getInt(2);
                    System.out.println("customer id" + cus_id);
                    txt_admission_no.setText(rs.getString(1));
                    txt_name.setText(rs.getString(3));
                    gettime();
                    addtotable();

                }

            } catch (Exception e) {
                e.printStackTrace();
            }

        }
    }//GEN-LAST:event_txt_barcodeKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IndividualTraineesAttendancePracticalClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IndividualTraineesAttendancePracticalClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IndividualTraineesAttendancePracticalClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IndividualTraineesAttendancePracticalClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                IndividualTraineesAttendancePracticalClass dialog = new IndividualTraineesAttendancePracticalClass(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbl_practical;
    private javax.swing.JTextField txt_admission_no;
    private javax.swing.JTextField txt_barcode;
    private javax.swing.JFormattedTextField txt_date;
    private javax.swing.JTextField txt_name;
    // End of variables declaration//GEN-END:variables

    private boolean isDateAndAdmissionExist() {
        boolean bol = false;

        try {

            ResultSet rs = model.db.getData("SELECT\n"
                    + "attendance_theoryclass.date,\n"
                    + "attendance_theoryclass.admissionNo\n"
                    + "FROM\n"
                    + "attendance_theoryclass\n"
                    + "WHERE\n"
                    + "attendance_theoryclass.date = '" + txt_date.getText() + "' AND\n"
                    + "attendance_theoryclass.admissionNo = '" + txt_admission_no.getText() + "'");
            if (rs.next()) {
                bol = true;
//                Messages.warningjoption("Barcode Already exist! ");

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return bol;
    }

    private void addtotable() {
        DefaultTableModel dtm = (DefaultTableModel) tbl_practical.getModel();
        String val1 = "";
        int i = 0;
        if (!txt_barcode.getText().isEmpty()) {
            for (i = 0; i < dtm.getRowCount(); i++) {
                val1 = (String) dtm.getValueAt(i, 0);
                System.out.println(val1);

                if (val1 == "" || val1==null) {
                    dtm.setValueAt(txt_date.getText(), i, 0);
                    dtm.setValueAt(currenttime, i, 2);
                    dtm.setValueAt(endtime, i, 3);
                    dtm.setValueAt(practiceTime, i, 4);
                    return;

                } else {
//                com.Messages.errorjoption("not empty");
                }

            }

        } else {
            com.Messages.errorjoption("Enter Barcode");
            return;

        }
    }
    String currenttime = "";
    String endtime;
    String practiceTime= "00:40:00";
    

    private void gettime() {

        SimpleDateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");
        Date date = new Date();
        currenttime = dateFormat.format(date);
       
        String dateStart = currenttime;
        String dateStop =practiceTime ;

        //HH converts hour in 24 hours format (0-23), day calculation
        SimpleDateFormat format = new SimpleDateFormat("HH:mm:ss");
        format.setTimeZone(TimeZone.getTimeZone("UTC"));
        

        Date d1 = null;
        Date d2 = null;
        

        try {
            d1 = format.parse(dateStart);
            d2 = format.parse(dateStop);

            //in milliseconds
            long addition = d2.getTime() + d1.getTime();
            String date3 = format.format(new Date(addition));
            System.out.println(date3);
            endtime=date3;

            

        } catch (Exception e) {
            e.printStackTrace();
        }

//        Date date = new Date();
//
//        currenttime = dateFormat.format(date);
//        System.out.println("current time"+currenttime);
//
//        Date date1 = dateFormat.parse(practicetime);
//        Date date2 = dateFormat.parse(currenttime);
//
//        long add = date1.getTime() + date2.getTime();
//        System.out.println("milisec"+ add);
//
//        long diffSeconds = add / 1000 % 60;
//        long diffMinutes = add /(60 * 1000) % 60;
//        long diffHours = add / (60 * 60 * 1000) % 24;
////        long diffDays = add / (24 * 60 * 60 * 1000);
//
////        System.out.print(diffDays + " days, ");
//        System.out.print(diffHours + " hours, ");
//        System.out.print(diffMinutes + " minutes, ");
//        System.out.print(diffSeconds + " seconds.");
//        endtime = diffHours+":"+diffMinutes+":"+diffSeconds ;
//        System.out.println("hour " + (date2.getTime() + date1.getTime()) / (60 * 60 * 1000));
//        System.out.println("min " + (date2.getTime() + date1.getTime()) / (60 * 1000) % 60);
//        System.out.println("sec " + (date2.getTime() + date1.getTime()) / (24 * 60 * 60 * 1000));
    }
}
