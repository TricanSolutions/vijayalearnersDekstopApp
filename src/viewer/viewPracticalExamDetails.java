/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package viewer;

import java.sql.ResultSet;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lasitha Ranawaka
 */
public class viewPracticalExamDetails extends javax.swing.JDialog {

    /**
     * Creates new form template
     */
    public viewPracticalExamDetails(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        loadtbl();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPracticalDetails = new javax.swing.JTable();
        txtFindByAdmissionNo = new javax.swing.JTextField();
        txtFindByNIC = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setBackground(new java.awt.Color(255, 51, 51));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 51));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Practical Exam Details");
        jLabel1.setOpaque(true);

        jLabel3.setText("Find by NIC");

        tblPracticalDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Admission No", "NIC", "Exam Date", "A", "Status", "B", "Status", "B1", "Status", "G", "Status", "D", "Status", "CE", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPracticalDetails.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblPracticalDetails);
        if (tblPracticalDetails.getColumnModel().getColumnCount() > 0) {
            tblPracticalDetails.getColumnModel().getColumn(0).setMinWidth(50);
            tblPracticalDetails.getColumnModel().getColumn(0).setPreferredWidth(50);
            tblPracticalDetails.getColumnModel().getColumn(0).setMaxWidth(50);
            tblPracticalDetails.getColumnModel().getColumn(1).setMinWidth(80);
            tblPracticalDetails.getColumnModel().getColumn(1).setPreferredWidth(80);
            tblPracticalDetails.getColumnModel().getColumn(1).setMaxWidth(80);
            tblPracticalDetails.getColumnModel().getColumn(2).setMinWidth(80);
            tblPracticalDetails.getColumnModel().getColumn(2).setPreferredWidth(80);
            tblPracticalDetails.getColumnModel().getColumn(2).setMaxWidth(80);
            tblPracticalDetails.getColumnModel().getColumn(3).setMinWidth(80);
            tblPracticalDetails.getColumnModel().getColumn(3).setPreferredWidth(80);
            tblPracticalDetails.getColumnModel().getColumn(3).setMaxWidth(80);
            tblPracticalDetails.getColumnModel().getColumn(4).setMinWidth(30);
            tblPracticalDetails.getColumnModel().getColumn(4).setPreferredWidth(30);
            tblPracticalDetails.getColumnModel().getColumn(4).setMaxWidth(30);
            tblPracticalDetails.getColumnModel().getColumn(5).setMinWidth(70);
            tblPracticalDetails.getColumnModel().getColumn(5).setPreferredWidth(70);
            tblPracticalDetails.getColumnModel().getColumn(5).setMaxWidth(70);
            tblPracticalDetails.getColumnModel().getColumn(6).setMinWidth(30);
            tblPracticalDetails.getColumnModel().getColumn(6).setPreferredWidth(30);
            tblPracticalDetails.getColumnModel().getColumn(6).setMaxWidth(30);
            tblPracticalDetails.getColumnModel().getColumn(7).setMinWidth(70);
            tblPracticalDetails.getColumnModel().getColumn(7).setPreferredWidth(70);
            tblPracticalDetails.getColumnModel().getColumn(7).setMaxWidth(70);
            tblPracticalDetails.getColumnModel().getColumn(8).setMinWidth(30);
            tblPracticalDetails.getColumnModel().getColumn(8).setPreferredWidth(30);
            tblPracticalDetails.getColumnModel().getColumn(8).setMaxWidth(30);
            tblPracticalDetails.getColumnModel().getColumn(9).setMinWidth(70);
            tblPracticalDetails.getColumnModel().getColumn(9).setPreferredWidth(70);
            tblPracticalDetails.getColumnModel().getColumn(9).setMaxWidth(70);
            tblPracticalDetails.getColumnModel().getColumn(10).setMinWidth(30);
            tblPracticalDetails.getColumnModel().getColumn(10).setPreferredWidth(30);
            tblPracticalDetails.getColumnModel().getColumn(10).setMaxWidth(30);
            tblPracticalDetails.getColumnModel().getColumn(11).setMinWidth(70);
            tblPracticalDetails.getColumnModel().getColumn(11).setPreferredWidth(70);
            tblPracticalDetails.getColumnModel().getColumn(11).setMaxWidth(70);
            tblPracticalDetails.getColumnModel().getColumn(12).setMinWidth(30);
            tblPracticalDetails.getColumnModel().getColumn(12).setPreferredWidth(30);
            tblPracticalDetails.getColumnModel().getColumn(12).setMaxWidth(30);
            tblPracticalDetails.getColumnModel().getColumn(13).setMinWidth(70);
            tblPracticalDetails.getColumnModel().getColumn(13).setPreferredWidth(70);
            tblPracticalDetails.getColumnModel().getColumn(13).setMaxWidth(70);
            tblPracticalDetails.getColumnModel().getColumn(14).setMinWidth(30);
            tblPracticalDetails.getColumnModel().getColumn(14).setPreferredWidth(30);
            tblPracticalDetails.getColumnModel().getColumn(14).setMaxWidth(30);
            tblPracticalDetails.getColumnModel().getColumn(15).setMinWidth(80);
            tblPracticalDetails.getColumnModel().getColumn(15).setPreferredWidth(80);
            tblPracticalDetails.getColumnModel().getColumn(15).setMaxWidth(80);
        }

        txtFindByAdmissionNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFindByAdmissionNoKeyReleased(evt);
            }
        });

        txtFindByNIC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFindByNICKeyReleased(evt);
            }
        });

        jLabel2.setText("Find by Admission No");

        jLabel4.setText("Find by NIC");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 922, Short.MAX_VALUE)
                            .addComponent(jScrollPane1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFindByAdmissionNo, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(txtFindByNIC, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(602, 602, 602)
                    .addComponent(jLabel3)
                    .addContainerGap(284, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFindByAdmissionNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFindByNIC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(279, 279, 279)
                    .addComponent(jLabel3)
                    .addContainerGap(280, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtFindByAdmissionNoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFindByAdmissionNoKeyReleased
        DefaultTableModel dtm = (DefaultTableModel) tblPracticalDetails.getModel();
        dtm.setRowCount(0);
        try {
            ResultSet rs = model.db.getData("SELECT\n"
                    + "practicalexam.id,\n"
                    + "customer_register.admission_no,\n"
                    + "customer_register.nic,\n"
                    + "practicalexam.examDate,\n"
                    + "practicalexam.a,\n"
                    + "practicalexam.a_pass_or_fail,\n"
                    + "practicalexam.b,\n"
                    + "practicalexam.b_pass_or_fail,\n"
                    + "practicalexam.bone,\n"
                    + "practicalexam.bone_pass_or_fail,\n"
                    + "practicalexam.g,\n"
                    + "practicalexam.g_pass_or_fail,\n"
                    + "practicalexam.d,\n"
                    + "practicalexam.d_pass_or_fail,\n"
                    + "practicalexam.ce,\n"
                    + "practicalexam.ce_pass_or_fail\n"
                    + "\n"
                    + "\n"
                    + "FROM\n"
                    + "practicalexam ,\n"
                    + "customer_register\n"
                    + "WHERE\n"
                    + "practicalexam.customer_register_id = customer_register.id AND customer_register.admission_no LIKE '" + txtFindByAdmissionNo.getText() + "%'\n"
                    + "ORDER BY\n"
                    + "practicalexam.customer_register_id ASC");

            while (rs.next()) {
                String id = rs.getString(1);
                String admno = rs.getString(2);
                String nic = rs.getString(3);

                String date = rs.getString(4);
                String a = rs.getString(5);
                String as = rs.getString(6);

                String b = rs.getString(7);
                String bs = rs.getString(8);

                String b1 = rs.getString(9);
                String b1s = rs.getString(10);

                String g = rs.getString(11);
                String gs = rs.getString(12);

                String d = rs.getString(13);
                String ds = rs.getString(14);

                String ce = rs.getString(15);
                String ces = rs.getString(16);

                Object arr[] = {id, admno, nic, date, a, as, b, bs, b1, b1s, g, gs, d, ds, ce, ces};
                dtm.addRow(arr);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_txtFindByAdmissionNoKeyReleased

    private void txtFindByNICKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFindByNICKeyReleased
        DefaultTableModel dtm = (DefaultTableModel) tblPracticalDetails.getModel();
        dtm.setRowCount(0);
        try {
            ResultSet rs = model.db.getData("SELECT\n"
                    + "practicalexam.id,\n"
                    + "customer_register.admission_no,\n"
                    + "customer_register.nic,\n"
                    + "practicalexam.examDate,\n"
                    + "practicalexam.a,\n"
                    + "practicalexam.a_pass_or_fail,\n"
                    + "practicalexam.b,\n"
                    + "practicalexam.b_pass_or_fail,\n"
                    + "practicalexam.bone,\n"
                    + "practicalexam.bone_pass_or_fail,\n"
                    + "practicalexam.g,\n"
                    + "practicalexam.g_pass_or_fail,\n"
                    + "practicalexam.d,\n"
                    + "practicalexam.d_pass_or_fail,\n"
                    + "practicalexam.ce,\n"
                    + "practicalexam.ce_pass_or_fail\n"
                    + "\n"
                    + "\n"
                    + "FROM\n"
                    + "practicalexam ,\n"
                    + "customer_register\n"
                    + "WHERE\n"
                    + "practicalexam.customer_register_id = customer_register.id AND customer_register.nic LIKE '" + txtFindByNIC.getText() + "%'\n"
                    + "ORDER BY\n"
                    + "practicalexam.customer_register_id ASC");

            while (rs.next()) {
                String id = rs.getString(1);
                String admno = rs.getString(2);
                String nic = rs.getString(3);

                String date = rs.getString(4);
                String a = rs.getString(5);
                String as = rs.getString(6);

                String b = rs.getString(7);
                String bs = rs.getString(8);

                String b1 = rs.getString(9);
                String b1s = rs.getString(10);

                String g = rs.getString(11);
                String gs = rs.getString(12);

                String d = rs.getString(13);
                String ds = rs.getString(14);

                String ce = rs.getString(15);
                String ces = rs.getString(16);

                Object arr[] = {id, admno, nic, date, a, as, b, bs, b1, b1s, g, gs, d, ds, ce, ces};
                dtm.addRow(arr);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_txtFindByNICKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(viewPracticalExamDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(viewPracticalExamDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(viewPracticalExamDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(viewPracticalExamDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                viewPracticalExamDetails dialog = new viewPracticalExamDetails(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPracticalDetails;
    private javax.swing.JTextField txtFindByAdmissionNo;
    private javax.swing.JTextField txtFindByNIC;
    // End of variables declaration//GEN-END:variables

    private void loadtbl() {
        DefaultTableModel dtm = (DefaultTableModel) tblPracticalDetails.getModel();
        dtm.setRowCount(0);
        try {
            ResultSet rs = model.db.getData("SELECT\n"
                    + "practicalexam.id,\n"
                    + "customer_register.admission_no,\n"
                    + "customer_register.nic,\n"
                    + "practicalexam.examDate,\n"
                    + "practicalexam.a,\n"
                    + "practicalexam.a_pass_or_fail,\n"
                    + "practicalexam.b,\n"
                    + "practicalexam.b_pass_or_fail,\n"
                    + "practicalexam.bone,\n"
                    + "practicalexam.bone_pass_or_fail,\n"
                    + "practicalexam.g,\n"
                    + "practicalexam.g_pass_or_fail,\n"
                    + "practicalexam.d,\n"
                    + "practicalexam.d_pass_or_fail,\n"
                    + "practicalexam.ce,\n"
                    + "practicalexam.ce_pass_or_fail\n"
                    + "\n"
                    + "\n"
                    + "FROM\n"
                    + "practicalexam ,\n"
                    + "customer_register\n"
                    + "WHERE\n"
                    + "practicalexam.customer_register_id = customer_register.id\n"
                    + "ORDER BY\n"
                    + "practicalexam.customer_register_id ASC");

            while (rs.next()) {
                String id = rs.getString(1);
                String admno = rs.getString(2);
                String nic = rs.getString(3);

                String date = rs.getString(4);
                String a = rs.getString(5);
                String as = rs.getString(6);

                String b = rs.getString(7);
                String bs = rs.getString(8);

                String b1 = rs.getString(9);
                String b1s = rs.getString(10);

                String g = rs.getString(11);
                String gs = rs.getString(12);

                String d = rs.getString(13);
                String ds = rs.getString(14);

                String ce = rs.getString(15);
                String ces = rs.getString(16);

                Object arr[] = {id, admno, nic, date, a, as, b, bs, b1, b1s, g, gs, d, ds, ce, ces};
                dtm.addRow(arr);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
