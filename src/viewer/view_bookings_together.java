/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package viewer;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import model.db;

/**
 *
 * @author Lasitha Ranawaka
 */
public class view_bookings_together extends javax.swing.JDialog {

    /**
     * Creates new form template
     */
    public view_bookings_together(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        calender = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl810 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl13 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbl35 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tbl1012 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setBackground(new java.awt.Color(255, 51, 51));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 51));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Bookings");
        jLabel1.setOpaque(true);

        tbl810.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Admission No", "Name", "TP"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl810.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tbl810);
        if (tbl810.getColumnModel().getColumnCount() > 0) {
            tbl810.getColumnModel().getColumn(0).setMinWidth(50);
            tbl810.getColumnModel().getColumn(0).setPreferredWidth(50);
            tbl810.getColumnModel().getColumn(0).setMaxWidth(50);
            tbl810.getColumnModel().getColumn(1).setMinWidth(75);
            tbl810.getColumnModel().getColumn(1).setPreferredWidth(75);
            tbl810.getColumnModel().getColumn(1).setMaxWidth(75);
            tbl810.getColumnModel().getColumn(3).setMinWidth(75);
            tbl810.getColumnModel().getColumn(3).setPreferredWidth(100);
            tbl810.getColumnModel().getColumn(3).setMaxWidth(100);
        }

        tbl13.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Admission No", "Name", "TP"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl13.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tbl13);
        if (tbl13.getColumnModel().getColumnCount() > 0) {
            tbl13.getColumnModel().getColumn(0).setMinWidth(50);
            tbl13.getColumnModel().getColumn(0).setPreferredWidth(50);
            tbl13.getColumnModel().getColumn(0).setMaxWidth(50);
            tbl13.getColumnModel().getColumn(1).setMinWidth(75);
            tbl13.getColumnModel().getColumn(1).setPreferredWidth(75);
            tbl13.getColumnModel().getColumn(1).setMaxWidth(75);
            tbl13.getColumnModel().getColumn(3).setMinWidth(75);
            tbl13.getColumnModel().getColumn(3).setPreferredWidth(100);
            tbl13.getColumnModel().getColumn(3).setMaxWidth(100);
        }

        tbl35.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Admission No", "Name", "TP"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl35.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tbl35);
        if (tbl35.getColumnModel().getColumnCount() > 0) {
            tbl35.getColumnModel().getColumn(0).setMinWidth(50);
            tbl35.getColumnModel().getColumn(0).setPreferredWidth(50);
            tbl35.getColumnModel().getColumn(0).setMaxWidth(50);
            tbl35.getColumnModel().getColumn(1).setMinWidth(75);
            tbl35.getColumnModel().getColumn(1).setPreferredWidth(75);
            tbl35.getColumnModel().getColumn(1).setMaxWidth(75);
            tbl35.getColumnModel().getColumn(3).setMinWidth(75);
            tbl35.getColumnModel().getColumn(3).setPreferredWidth(100);
            tbl35.getColumnModel().getColumn(3).setMaxWidth(100);
        }

        tbl1012.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Admission No", "Name", "TP"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl1012.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(tbl1012);
        if (tbl1012.getColumnModel().getColumnCount() > 0) {
            tbl1012.getColumnModel().getColumn(0).setMinWidth(50);
            tbl1012.getColumnModel().getColumn(0).setPreferredWidth(50);
            tbl1012.getColumnModel().getColumn(0).setMaxWidth(50);
            tbl1012.getColumnModel().getColumn(1).setMinWidth(75);
            tbl1012.getColumnModel().getColumn(1).setPreferredWidth(75);
            tbl1012.getColumnModel().getColumn(1).setMaxWidth(75);
            tbl1012.getColumnModel().getColumn(3).setMinWidth(75);
            tbl1012.getColumnModel().getColumn(3).setPreferredWidth(100);
            tbl1012.getColumnModel().getColumn(3).setMaxWidth(100);
        }

        jButton1.setText("Find");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(calender, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(37, 37, 37)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(calender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        loadtbl0();
        loadtbl1();
        loadtbl2();
        loadtbl3();


    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(view_bookings_together.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(view_bookings_together.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(view_bookings_together.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(view_bookings_together.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                view_bookings_together dialog = new view_bookings_together(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser calender;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable tbl1012;
    private javax.swing.JTable tbl13;
    private javax.swing.JTable tbl35;
    private javax.swing.JTable tbl810;
    // End of variables declaration//GEN-END:variables

    private void loadtbl0() {
        DefaultTableModel dtm = (DefaultTableModel) tbl810.getModel();
        dtm.setRowCount(0);
        try {
            ResultSet rs = db.getData("SELECT\n"
                    + "booking.id,\n"
                    + "booking.admission_no,\n"
                    + "customer_register.tp1,\n"
                    + "uniquecustomerdetails.namewithinitial,\n"
                    + "booking.time\n"
                    + "FROM\n"
                    + "booking ,\n"
                    + "customer_register ,\n"
                    + "uniquecustomerdetails\n"
                    + "WHERE\n"
                    + "booking.customer_register_id = customer_register.id AND\n"
                    + "customer_register.uniqueCustomerDetails_id = uniquecustomerdetails.id AND\n"
                    + "booking.date = '" + new SimpleDateFormat("yyyy-MM-dd").format(calender.getDate()) + "'");

            int a = 1;

            while (rs.next()) {
                String admission = rs.getString(2);
                String name = rs.getString(4);
                String tp = rs.getString(3);

                if (rs.getString(5).equals("8-10")) {
                    Object arr[] = {a, admission, name, tp};
                    dtm.addRow(arr);
                    a++;

                }

            }

        } catch (SQLException ex) {
            Logger.getLogger(view_bookings_together.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void loadtbl1() {
         DefaultTableModel dtm1 = (DefaultTableModel) tbl1012.getModel();
        dtm1.setRowCount(0);
        try {
            ResultSet rs = db.getData("SELECT\n"
                    + "booking.id,\n"
                    + "booking.admission_no,\n"
                    + "customer_register.tp1,\n"
                    + "uniquecustomerdetails.namewithinitial,\n"
                    + "booking.time\n"
                    + "FROM\n"
                    + "booking ,\n"
                    + "customer_register ,\n"
                    + "uniquecustomerdetails\n"
                    + "WHERE\n"
                    + "booking.customer_register_id = customer_register.id AND\n"
                    + "customer_register.uniqueCustomerDetails_id = uniquecustomerdetails.id AND\n"
                    + "booking.date = '" + new SimpleDateFormat("yyyy-MM-dd").format(calender.getDate()) + "'");

            int a = 1;

            while (rs.next()) {
                String admission = rs.getString(2);
                String name = rs.getString(4);
                String tp = rs.getString(3);

                if (rs.getString(5).equals("10-12")) {
                    Object arr[] = {a, admission, name, tp};
                    dtm1.addRow(arr);
                    a++;

                }

            }

        } catch (SQLException ex) {
            Logger.getLogger(view_bookings_together.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void loadtbl2() {
        DefaultTableModel dtm2 = (DefaultTableModel) tbl13.getModel();
        dtm2.setRowCount(0);
        try {
            ResultSet rs = db.getData("SELECT\n"
                    + "booking.id,\n"
                    + "booking.admission_no,\n"
                    + "customer_register.tp1,\n"
                    + "uniquecustomerdetails.namewithinitial,\n"
                    + "booking.time\n"
                    + "FROM\n"
                    + "booking ,\n"
                    + "customer_register ,\n"
                    + "uniquecustomerdetails\n"
                    + "WHERE\n"
                    + "booking.customer_register_id = customer_register.id AND\n"
                    + "customer_register.uniqueCustomerDetails_id = uniquecustomerdetails.id AND\n"
                    + "booking.date = '" + new SimpleDateFormat("yyyy-MM-dd").format(calender.getDate()) + "'");

            int a = 1;

            while (rs.next()) {
                String admission = rs.getString(2);
                String name = rs.getString(4);
                String tp = rs.getString(3);

                if (rs.getString(5).equals("1-3")) {
                    Object arr[] = {a, admission, name, tp};
                    dtm2.addRow(arr);
                    a++;

                }

            }

        } catch (SQLException ex) {
            Logger.getLogger(view_bookings_together.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadtbl3() {
       DefaultTableModel dtm3 = (DefaultTableModel) tbl35.getModel();
        dtm3.setRowCount(0);
        try {
            ResultSet rs = db.getData("SELECT\n"
                    + "booking.id,\n"
                    + "booking.admission_no,\n"
                    + "customer_register.tp1,\n"
                    + "uniquecustomerdetails.namewithinitial,\n"
                    + "booking.time\n"
                    + "FROM\n"
                    + "booking ,\n"
                    + "customer_register ,\n"
                    + "uniquecustomerdetails\n"
                    + "WHERE\n"
                    + "booking.customer_register_id = customer_register.id AND\n"
                    + "customer_register.uniqueCustomerDetails_id = uniquecustomerdetails.id AND\n"
                    + "booking.date = '" + new SimpleDateFormat("yyyy-MM-dd").format(calender.getDate()) + "'");

            int a = 1;
            while (rs.next()) {
                String admission = rs.getString(2);
                String name = rs.getString(4);
                String tp = rs.getString(3);

                if (rs.getString(5).equals("3-5")) {
                    Object arr[] = {a, admission, name, tp};
                    dtm3.addRow(arr);
                    a++;

                }

            }

        } catch (SQLException ex) {
            Logger.getLogger(view_bookings_together.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
